{
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters":
  {
    "location":
    {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata":
      {
        "description": "The location of the resources (Azure region)"
      }
    },
    "sourceStorageAccountName":
    {
      "type": "string",
      "metadata":
      {
        "description": "Mandatory. The name of the storage account that is to be monitored by the Azure Function."
      }
    },
    "sourceContainerName":
    {
      "type": "string",
      "defaultValue": "uploads",
      "metadata":
      {
        "description": "The name of the storage account container that is to be monitored by the Azure Function."
      }
    },
    "sourceAccountResourceGroup":
    {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata":
      {
        "description": "Optional. The name of the source storage account's resource group if not the same as the current resource group."
      }
    },
    "targetStorageAccountName":
    {
      "type": "string",
      "metadata":
      {
        "description": "Mandatory. The name of the storage account that contains the file share to which source files are to be copied by the Azure Function."
      }
    },
    "targetShareName":
    {
      "type": "string",
      "defaultValue": "share1",
      "metadata":
      {
        "description": "The name of the Azure Files share to which source files are to be copied."
      }
    },
    "targetFolderName":
    {
      "type": "string",
      "defaultValue": "transport",
      "metadata":
      {
        "description": "The name of the folder in the Azure Files share."
      }
    },
    "targetAccountResourceGroup":
    {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata":
      {
        "description": "Optional. The name of the target storage account's resource group if not the same as the current resource group."
      }
    },
    "appServicePlan":
    {
      "type": "string",
      "defaultValue": "S1",
      "metadata":
      {
        "description": "The App Service Plan to use for the Funciton App. More information here: https://azure.microsoft.com/en-us/pricing/details/app-service/."
      },
      "allowedValues":
      [
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1v2",
        "P2v2",
        "P3v2",
        "I1",
        "I2",
        "I3"
      ]
    },
    "numInstances":
    {
      "type": "int",
      "defaultValue": 1,
      "metadata":
      {
        "description": "The number of instances for the specified App Service Plan."
      }
    }
  },
  "variables":
  {
    "uniqueSuffix": "[uniqueString(resourceGroup().id, deployment().name)]",
    "storageAccountName": "[concat('stox', variables('uniqueSuffix'))]",
    "hostingPlanName": "[concat('plax', variables('uniqueSuffix'))]",
    "functionAppName": "[concat('funx', variables('uniqueSuffix'))]",
    "storageApiVersion": "2016-12-01",
    "appServiceApiVersion": "2016-08-01",
    "hostingPlanApiVersion": "2016-09-01",
    "mediaTransport2UncFileShareFunction":
    {
      "functionName": "MediaTransport2UncFileShare",
      "functionFiles":
      {
        "run.csx": "#r \"Microsoft.WindowsAzure.Storage\"\r\n#load \"BlobToFileCopyUtility.cs\"\r\n\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Azure.WebJobs;\r\nusing Microsoft.Azure.WebJobs.Host;\r\nusing Microsoft.WindowsAzure.Storage.Blob;\r\n\r\npublic static async Task Run(CloudBlockBlob blob, string name, TraceWriter log)\r\n{\r\n    log.Info($\"C# Blob trigger function Processed blob\\nSource Name: {name} \\nSource Uri: {blob.Uri}\");\r\n    await BlobToFileCopyUtility.CopyBlockBlobToFile(blob, log);\r\n}\r\n",
        "project.json": "{\r\n  \"frameworks\":\r\n  {\r\n    \"net46\":\r\n    {\r\n      \"dependencies\":\r\n      {\r\n        \"WindowsAzure.Storage\": \"7.2.1\"\r\n      }\r\n    }\r\n  }\r\n}",
        "function.json": "[concat('{\r\n  \"bindings\":\r\n  [\r\n    {\r\n      \"name\": \"blob\",\r\n      \"type\": \"blobTrigger\",\r\n      \"direction\": \"in\",\r\n      \"path\": \"', parameters('sourceContainerName'), '/{name}\",\r\n      \"connection\": \"UploadsStorage\"\r\n    }\r\n  ],\r\n  \"disabled\": false\r\n}')]",
        "host.json": "{\r\n  \"queues\":\r\n  {\r\n    \"visibilityTimeout\": \"00:00:30\",\r\n    \"maxDequeueCount\": 5\r\n  }\r\n}",
        "BlobToFileCopyUtility.cs": "using System;\r\nusing System.Configuration;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Azure.WebJobs.Host;\r\nusing Microsoft.WindowsAzure.Storage;\r\nusing Microsoft.WindowsAzure.Storage.Blob;\r\nusing Microsoft.WindowsAzure.Storage.File;\r\n\r\n// This class has no namespace to make it easier to include in both the local Function App project (compiled DLL, debug with VS) as well as a helper class to the CSX Function App C# script file.\r\npublic static class BlobToFileCopyUtility\r\n{\r\n    private const double SasExpirationInHours = 24;\r\n    private const int CopyOperationWaitInMilliseconds = 500;\r\n\r\n    public static async Task CopyBlockBlobToFile(CloudBlockBlob sourceBlob, TraceWriter log)\r\n    {\r\n        try\r\n        {\r\n            // 1) Get source file settings.\r\n            string targetConnectionString = ConfigurationManager.AppSettings[\"TARGET_STORAGEACCOUNT_CONNECTIONSTRING\"];\r\n            string fileShareName = ConfigurationManager.AppSettings[\"TARGET_FILESHARE_NAME\"];\r\n            string fileShareFolderName = ConfigurationManager.AppSettings[\"TARGET_FILESHARE_FOLDERNAME\"];\r\n            string targetFileName = sourceBlob.Name;\r\n            bool deleteSourceBlobAfterTransferSuccess = bool.Parse(ConfigurationManager.AppSettings[\"DELETE_SOURCEBLOB_AFTER_TRANSFER_SUCCESS\"]);\r\n\r\n            log.Info($\"[Input]: Target File Name: {targetFileName}\");\r\n            log.Info($\"[Setting]: Target Connection String: {targetConnectionString}\");\r\n            log.Info($\"[Setting]: File Share Name: {fileShareName}\");\r\n            log.Info($\"[Setting]: File Share Folder Name: {fileShareFolderName}\");\r\n            log.Info($\"[Setting]: Delete Source Blob After Transfer Success: {deleteSourceBlobAfterTransferSuccess}\");\r\n\r\n            // 2) Copy to Azure Files.\r\n            await CopyBlobToAzureFiles(sourceBlob, targetConnectionString, fileShareName, fileShareFolderName, targetFileName, log);\r\n\r\n            if (deleteSourceBlobAfterTransferSuccess)\r\n            {\r\n                log.Info($\"Deleting source blob ({sourceBlob.Name}) after successful transfer since file share since DELETE_SOURCEBLOB_AFTER_TRANSFER_SUCCESS=true.\");\r\n                await sourceBlob.DeleteAsync();\r\n            }\r\n        }\r\n        catch (Exception exception)\r\n        {\r\n            log.Error($\"Error in CopyBlockBlobToFile: {exception.Message}\\n{exception.StackTrace}\");\r\n            throw;\r\n        }\r\n    }\r\n\r\n    private static async Task CopyBlobToAzureFiles(CloudBlockBlob sourceBlob, string targetConnectionString, string fileShareName, string fileShareFolderName, string targetFileName, TraceWriter log)\r\n    {\r\n        // Reference: https://github.com/Azure-Samples/storage-file-dotnet-getting-started/blob/master/FileStorage/GettingStarted.cs\r\n        CloudStorageAccount storageAccount = CloudStorageAccount.Parse(targetConnectionString);\r\n        CloudFileClient fileClient = storageAccount.CreateCloudFileClient();\r\n        CloudFileShare share = fileClient.GetShareReference(fileShareName);\r\n\r\n        if (!share.Exists())\r\n        {\r\n            log.Info($\"Creating file share since it does not exist: {fileShareName}\");\r\n            await share.CreateAsync();\r\n        }\r\n\r\n        CloudFileDirectory rootDir = share.GetRootDirectoryReference();\r\n        CloudFileDirectory targetDir = rootDir.GetDirectoryReference(fileShareFolderName);\r\n        await targetDir.CreateIfNotExistsAsync();\r\n        string[] sourceFolders = sourceBlob.Name.Split('/');\r\n        if (sourceFolders.Length > 1)\r\n        {\r\n            for (int i = 0; i < sourceFolders.Length - 1; i++)\r\n            {\r\n                var subfolderName = sourceFolders[i];\r\n                log.Info($\"Creating subfolder: {subfolderName}\");\r\n                targetDir = targetDir.GetDirectoryReference(subfolderName);\r\n                await targetDir.CreateIfNotExistsAsync();\r\n            }\r\n\r\n            targetFileName = sourceFolders[sourceFolders.Length - 1];\r\n        }\r\n\r\n        // Copy the source file to a temporary file.\r\n        string targetTempFileName = $\"{targetFileName}.tmp\";\r\n        CloudFile tempFile = targetDir.GetFileReference(targetTempFileName);\r\n        string blobSas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()\r\n        {\r\n            Permissions = SharedAccessBlobPermissions.Read,\r\n            SharedAccessExpiryTime = DateTime.UtcNow.AddHours(SasExpirationInHours)\r\n        });\r\n\r\n        var blobSasUri = new Uri($\"{sourceBlob.StorageUri.PrimaryUri}{blobSas}\");\r\n        log.Info($\"Source blob SAS URL (expires in {SasExpirationInHours} hours): {blobSasUri}\");\r\n        log.Info($\"Copying source blob to temporary target file share: {tempFile.Uri.AbsoluteUri}\");\r\n        Stopwatch sw = new Stopwatch();\r\n        sw.Start();\r\n        await tempFile.StartCopyAsync(blobSasUri);\r\n        await WaitForCopyAsync(tempFile, log);\r\n        ThrowIfCopyNotSuccessful(tempFile);\r\n        sw.Stop();\r\n        log.Info($\"Successfully copied (in {sw.ElapsedMilliseconds} msecs) source blob to temporary target file share: {tempFile.Uri.AbsoluteUri}\");\r\n\r\n        // Rename the copied temporary file to original name.\r\n        CloudFile file = targetDir.GetFileReference(targetFileName);\r\n        log.Info($\"Copying temporary target file to final target file: {file.Uri.AbsoluteUri}\");\r\n        sw.Restart();\r\n        await file.StartCopyAsync(tempFile);\r\n        await WaitForCopyAsync(file, log);\r\n        ThrowIfCopyNotSuccessful(file);\r\n        sw.Stop();\r\n        log.Info($\"Successfully copied (in {sw.ElapsedMilliseconds} msecs) temporary target file to final target file: {file.Uri.AbsoluteUri}\");\r\n\r\n        // Delete the temporary file.\r\n        log.Info($\"Deleting temporary target file: {tempFile.Uri.AbsoluteUri}\");\r\n        sw.Restart();\r\n        await tempFile.DeleteAsync();\r\n        sw.Stop();\r\n        log.Info($\"Successfully deleted (in {sw.ElapsedMilliseconds} msecs) temporary target file: {tempFile.Uri.AbsoluteUri}\");\r\n    }\r\n\r\n    private static async Task WaitForCopyAsync(CloudFile file, TraceWriter log)\r\n    {\r\n        // Reference: https://github.com/Azure/azure-storage-net/blob/master/Test/WindowsRuntime/File/FileTestBase.cs\r\n        log.Info($\"Waiting for copy operation to finish. (wait interval: {CopyOperationWaitInMilliseconds} msecs).\");\r\n        bool copyInProgress = true;\r\n        while (copyInProgress)\r\n        {\r\n            await Task.Delay(CopyOperationWaitInMilliseconds);\r\n            await file.FetchAttributesAsync();\r\n            copyInProgress = (file.CopyState.Status == CopyStatus.Pending);\r\n        }\r\n    }\r\n\r\n    private static void ThrowIfCopyNotSuccessful(CloudFile file)\r\n    {\r\n        if (file.CopyState.Status != CopyStatus.Success)\r\n        {\r\n            throw new Exception($\"Copy operation failed with status: {file.CopyState.Status}.\");\r\n        }\r\n    }\r\n}\r\n"
      }
    }
  },
  "resources":
  [
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku":
      {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "[variables('hostingPlanApiVersion')]",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "dependsOn":
      [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties":
      {
        "name": "[variables('hostingPlanName')]",
        "kind": "functionapp"
      },
      "sku":
      {
        "name": "[parameters('appServicePlan')]",
        "capacity": "[parameters('numInstances')]"
      }
    },
    {
      "apiVersion": "[variables('appServiceApiVersion')]",
      "name": "[variables('functionAppName')]",
      "type": "Microsoft.Web/sites",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn":
      [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ],
      "properties":
      {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig":
        {
          "appSettings":
          [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('storageApiVersion')).keys[0].value)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('storageApiVersion')).keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('storageApiVersion')).keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[concat(toLower(variables('functionAppName')), '9e6d5a406cbc')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "6.5.0"
            },
            {
              "name": "WEBSITE_USE_PLACEHOLDER",
              "value": "0"
            },
            {
              "name": "UploadsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('sourceStorageAccountName'),';AccountKey=',listKeys(resourceId(parameters('sourceAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('sourceStorageAccountName')), variables('storageApiVersion')).keys[0].value)]"
            },
            {
              "name": "TARGET_STORAGEACCOUNT_CONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('targetStorageAccountName'),';AccountKey=',listKeys(resourceId(parameters('targetAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('targetStorageAccountName')), variables('storageApiVersion')).keys[0].value)]"
            },
            {
              "name": "TARGET_FILESHARE_NAME",
              "value": "[parameters('targetShareName')]"
            },
            {
              "name": "TARGET_FILESHARE_FOLDERNAME",
              "value": "[parameters('targetFolderName')]"
            },
            {
              "name": "DELETE_SOURCEBLOB_AFTER_TRANSFER_SUCCESS",
              "value": "false"
            }
          ]
        },
        "clientAffinityEnabled": false
      }
    },
    {
      "apiVersion": "[variables('appServiceApiVersion')]",
      "name": "[concat(variables('functionAppName'), '/', variables('mediaTransport2UncFileShareFunction').functionName)]",
      "type": "Microsoft.Web/sites/functions",
      "dependsOn":
      [
        "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]"
      ],
      "properties":
      {
        "config":
        {
          "bindings":
          [
            {
              "name": "req",
              "authLevel": "function",
              "direction": "in",
              "type": "httpTrigger"
            },
            {
              "name": "res",
              "direction": "out",
              "type": "http"
            }
          ],
          "disabled": false
        },
        "files": "[variables('mediaTransport2UncFileShareFunction').functionFiles]"
      }
    }
  ],
  "outputs":
  {
  }
}